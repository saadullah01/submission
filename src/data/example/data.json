{  
    "CVE-2024-4340": {
        "cwe": [
            {
                "id": "CWE-674",
                "value": "CWE-674 Uncontrolled Recursion"
            }
        ],
        "patch_commits": [
            {
                "url": "https://github.com/andialbrecht/sqlparse/commit/b4a39d9850969b4e1d6940d32094ee0b42a2cf03",
                "content": "Raise SQLParseError instead of RecursionError.\n\nFilename: CHANGELOG:\n```\n@@ -5,6 +5,11 @@\nNotable Changes\n \n * Drop support for Python 3.5, 3.6, and 3.7.\n * Python 3.12 is now supported (pr725, by hugovk).\n+* IMPORTANT: Fixes a potential denial of service attack (DOS) due to recursion\n+  error for deeply nested statements. Instead of recursion error a generic\n+  SQLParseError is raised. See the security advisory for details:\n+  https://github.com/andialbrecht/sqlparse/security/advisories/GHSA-2m57-hf25-phgg\n+  The vulnerability was discovered by @uriyay-jfrog. Thanks for reporting!\n \n Enhancements:\n```\n\nFilename: sqlparse/sql.py:\n```\n@@ -10,6 +10,7 @@\nimport re\n \n from sqlparse import tokens as T\n+from sqlparse.exceptions import SQLParseError\n from sqlparse.utils import imt, remove_quotes\n\n@@ -209,11 +210,14 @@\ndef flatten(self):\n \n         This method is recursively called for all child tokens.\n         \"\"\"\n-        for token in self.tokens:\n-            if token.is_group:\n-                yield from token.flatten()\n-            else:\n-                yield token\n+        try:\n+            for token in self.tokens:\n+                if token.is_group:\n+                    yield from token.flatten()\n+                else:\n+                    yield token\n+        except RecursionError as err:\n+            raise SQLParseError('Maximum recursion depth exceeded') from err\n \n     def get_sublists(self):\n         for token in self.tokens:\n```\n\nFilename: tests/test_regressions.py:\n```\n@@ -1,9 +1,11 @@\nimport copy\n+import sys\n \n import pytest\n \n import sqlparse\n from sqlparse import sql, tokens as T\n+from sqlparse.exceptions import SQLParseError\n \n \n def test_issue9():\n\n@@ -449,4 +451,17 @@\ndef test_copy_issue672():\n def test_primary_key_issue740():\n     p = sqlparse.parse('PRIMARY KEY')[0]\n     assert len(p.tokens) == 1\n-    assert p.tokens[0].ttype == T.Keyword\n\\ No newline at end of file\n+    assert p.tokens[0].ttype == T.Keyword\n+\n+\n+@pytest.fixture\n+def limit_recursion():\n+    curr_limit = sys.getrecursionlimit()\n+    sys.setrecursionlimit(70)\n+    yield\n+    sys.setrecursionlimit(curr_limit)\n+\n+\n+def test_max_recursion(limit_recursion):\n+    with pytest.raises(SQLParseError):\n+        sqlparse.parse('[' * 100 + ']' * 100)\n```"
            }
        ],
        "sw_version": "0.4.4",
        "sw_version_wget": "https://github.com/andialbrecht/sqlparse/archive/refs/tags/0.4.4.zip",
        "sec_adv": [
            {
                "url": "https://github.com/advisories/GHSA-2m57-hf25-phgg",
                "content": "Skip to content\nNavigation Menu\nProduct\nSolutions\nResources\nOpen Source\nEnterprise\nPricing\nSearch or jump to...\nSign in\nSign up\nDismiss alert\nGitHub Advisory Database GitHub Reviewed CVE-2024-4340\nsqlparse parsing heavily nested list leads to Denial of Service\nHigh severity GitHub Reviewed Published on Apr 13, 2024Apr 13, 2024 in andialbrecht/sqlparse \u2022 Updated on May 1, 2024May 1, 2024\nVulnerability details\nDependabot alerts\n0\nPackage\npip sqlparse\n(\npip\n)\nAffected versions\n< 0.5.0\nPatched versions\n0.5.0\nDescription\nSummary\nPassing a heavily nested list to sqlparse.parse() leads to a Denial of Service due to RecursionError.\nDetails + PoC\nRunning the following code will raise Maximum recursion limit exceeded exception:\nimport sqlparse\nsqlparse.parse('[' * 10000 + ']' * 10000)\nWe expect a traceback of RecursionError:\nTraceback (most recent call last):\n  File \"trigger_sqlparse_nested_list.py\", line 3, in <module>\n    sqlparse.parse('[' * 10000 + ']' * 10000)\n  File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/__init__.py\", line 30, in parse\n    return tuple(parsestream(sql, encoding))\n  File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/engine/filter_stack.py\", line 36, in run\n    stmt = grouping.group(stmt)\n  File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/engine/grouping.py\", line 428, in group\n    func(stmt)\n  File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/engine/grouping.py\", line 53, in group_brackets\n    _group_matching(tlist, sql.SquareBrackets)\n  File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/engine/grouping.py\", line 48, in _group_matching\n    tlist.group_tokens(cls, open_idx, close_idx)\n  File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/sql.py\", line 328, in group_tokens\n    grp = grp_cls(subtokens)\n  File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/sql.py\", line 161, in __init__\n    super().__init__(None, str(self))\n  File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/sql.py\", line 165, in __str__\n    return ''.join(token.value for token in self.flatten())\n  File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/sql.py\", line 165, in <genexpr>\n    return ''.join(token.value for token in self.flatten())\n  File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/sql.py\", line 214, in flatten\n    yield from token.flatten()\n  File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/sql.py\", line 214, in flatten\n    yield from token.flatten()\n  File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/sql.py\", line 214, in flatten\n    yield from token.flatten()\n  [Previous line repeated 983 more times]\nRecursionError: maximum recursion depth exceeded\nFix suggestion\nThe flatten() function of TokenList class should limit the recursion to a maximal depth:\nfrom sqlparse.exceptions import SQLParseError\n\nMAX_DEPTH = 100\n\n    def flatten(self, depth=1):\n        \"\"\"Generator yielding ungrouped tokens.\n\n        This method is recursively called for all child tokens.\n        \"\"\"\n    if depth >= MAX_DEPTH:\n        raise SQLParseError('Maximal depth reached')\n        for token in self.tokens:\n            if token.is_group:\n                yield from token.flatten(depth + 1)\n            else:\n                yield token\nImpact\nDenial of Service (the impact depends on the use).\nAnyone parsing a user input with sqlparse.parse() is affected.\nReferences\nGHSA-2m57-hf25-phgg\nandialbrecht/sqlparse@b4a39d9\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-4340\nhttps://research.jfrog.com/vulnerabilities/sqlparse-stack-exhaustion-dos-jfsa-2024-001031292\nandialbrecht published to andialbrecht/sqlparse on Apr 13, 2024Apr 13, 2024\nPublished to the GitHub Advisory Database on Apr 15, 2024Apr 15, 2024\nReviewed on Apr 15, 2024Apr 15, 2024\nLast updated on May 1, 2024May 1, 2024\nSeverity\nHigh\n7.5\n/ 10\nCVSS v3 base metrics\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nNone\nAvailability\nHigh\nLearn more about base metrics\nCVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H\nEPSS score\n0.065%\n(31st percentile)\nWeaknesses\nCWE-674\nCVE ID\nCVE-2024-4340\nGHSA ID\nGHSA-2m57-hf25-phgg\nSource code\nandialbrecht/sqlparse\nCredits\nuriyay-jfrog\nReporter\nThis advisory has been edited. See History.\nSee something to contribute? Suggest improvements for this vulnerability.\nFooter\n\u00a9 2025 GitHub, Inc.\nFooter navigation\nTerms\nPrivacy\nSecurity\nStatus\nDocs\nContact\nManage cookies\nDo not share my personal information",
                "effective": true
            }
        ],
        "description": "Passing a heavily nested list to sqlparse.parse() leads to a Denial of Service due to RecursionError.\n\n"
    }
}