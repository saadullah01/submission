{
    "CVE-2025-32389": {
        "cwe": [
            {
                "id": "CWE-89",
                "value": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            }
        ],
        "description": "NamelessMC is a free, easy to use & powerful website software for Minecraft servers. Prior to version 2.1.4, NamelessMC is vulnerable to SQL injection by providing an unexpected square bracket GET parameter syntax. Square bracket GET parameter syntax refers to the structure `?param[0]=a&param[1]=b&param[2]=c` utilized by PHP, which is parsed by PHP as `$_GET['param']` being of type array. This issue has been patched in version 2.1.4.",
        "languages": [
            "PHP",
            "Smarty"
        ],
        "patch_commits": [],
        "published_date": "2025-04-18T15:56:39.962Z",
        "sec_adv": [],
        "sw_version": "v2.1.3",
        "sw_version_wget": "https://github.com/NamelessMC/Nameless/archive/refs/tags/v2.1.3.zip"
    },
    "CVE-2025-46728": {
        "published_date": "2025-05-06T00:45:25.130Z",
        "patch_commits": [],
        "sw_version": "v0.20.0",
        "sw_version_wget": "https://github.com/yhirose/cpp-httplib/archive/refs/tags/v0.20.0.zip",
        "description": "cpp-httplib is a C++ header-only HTTP/HTTPS server and client library. Prior to version 0.20.1, the library fails to enforce configured size limits on incoming request bodies when `Transfer-Encoding: chunked` is used or when no `Content-Length` header is provided. A remote attacker can send a chunked request without the terminating zero-length chunk, causing uncontrolled memory allocation on the server. This leads to potential exhaustion of system memory and results in a server crash or unresponsiveness. Version 0.20.1 fixes the issue by enforcing limits during parsing. If the limit is exceeded at any point during reading, the connection is terminated immediately. A short-term workaround through a Reverse Proxy is available. If updating the library immediately is not feasible, deploy a reverse proxy (e.g., Nginx, HAProxy) in front of the `cpp-httplib` application. Configure the proxy to enforce maximum request body size limits, thereby stopping excessively large requests before they reach the vulnerable library code.",
        "sec_adv": [],
        "cwe": [
            {
                "id": "CWE-400",
                "value": "CWE-400: Uncontrolled Resource Consumption"
            }
        ]
    },
    "CVE-2025-30208": {
        "published_date": "2025-03-24T17:03:40.728Z",
        "patch_commits": [],
        "sw_version": "v4.5.9",
        "sw_version_wget": "https://github.com/vitejs/vite/archive/refs/tags/v4.5.9.zip",
        "description": "Vite, a provider of frontend development tooling, has a vulnerability in versions prior to 6.2.3, 6.1.2, 6.0.12, 5.4.15, and 4.5.10. `@fs` denies access to files outside of Vite serving allow list. Adding `?raw??` or `?import&raw??` to the URL bypasses this limitation and returns the file content if it exists. This bypass exists because trailing separators such as `?` are removed in several places, but are not accounted for in query string regexes. The contents of arbitrary files can be returned to the browser. Only apps explicitly exposing the Vite dev server to the network (using `--host` or `server.host` config option) are affected. Versions 6.2.3, 6.1.2, 6.0.12, 5.4.15, and 4.5.10 fix the issue.",
        "sec_adv": [],
        "cwe": [
            {
                "id": "CWE-200",
                "value": "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"
            },
            {
                "id": "CWE-284",
                "value": "CWE-284: Improper Access Control"
            }
        ]
    },
    "CVE-2025-27597": {
        "published_date": "2025-03-07T15:51:39.753Z",
        "patch_commits": [],
        "sw_version": "v9.1.0",
        "sw_version_wget": "https://github.com/intlify/vue-i18n/archive/refs/tags/v9.1.0.zip",
        "description": "Vue I18n is the internationalization plugin for Vue.js. @intlify/message-resolver and @intlify/vue-i18n-core are vulnerable to Prototype Pollution through the entry function: handleFlatJson. An attacker can supply a payload with Object.prototype setter to introduce or modify properties within the global prototype chain, causing denial of service (DoS) a the minimum consequence. Moreover, the consequences of this vulnerability can escalate to other injection-based attacks, depending on how the library integrates within the application. For instance, if the polluted property propagates to sensitive Node.js APIs (e.g., exec, eval), it could enable an attacker to execute arbitrary commands within the application's context.",
        "sec_adv": [],
        "cwe": [
            {
                "id": "CWE-1321",
                "value": "CWE-1321: Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')"
            }
        ]
    },
    "CVE-2025-43855": {
        "published_date": "2025-04-24T13:58:30.536Z",
        "patch_commits": [],
        "sw_version": "v11.0.0",
        "sw_version_wget": "https://github.com/trpc/trpc/archive/refs/tags/v11.0.0.zip",
        "description": "tRPC allows users to build & consume fully typesafe APIs without schemas or code generation. In versions starting from 11.0.0 to before 11.1.1, an unhandled error is thrown when validating invalid connectionParams which crashes a tRPC WebSocket server. This allows any unauthenticated user to crash a tRPC 11 WebSocket server. Any tRPC 11 server with WebSocket enabled with a createContext method set is vulnerable. This issue has been patched in version 11.1.1.",
        "sec_adv": [],
        "cwe": [
            {
                "id": "CWE-248",
                "value": "CWE-248: Uncaught Exception"
            }
        ]
    },
    "CVE-2025-0454": {
        "published_date": "2025-03-20T10:11:30.365Z",
        "patch_commits": [],
        "sw_version": "v0.3.1",
        "sw_version_wget": "https://github.com/significant-gravitas/autogpt/archive/refs/tags/v0.3.1.zip",
        "description": "A Server-Side Request Forgery (SSRF) vulnerability was identified in the Requests utility of significant-gravitas/autogpt versions prior to v0.4.0. The vulnerability arises due to a hostname confusion between the `urlparse` function from the `urllib.parse` library and the `requests` library. A malicious user can exploit this by submitting a specially crafted URL, such as `http://localhost:\\@google.com/../`, to bypass the SSRF check and perform an SSRF attack.",
        "sec_adv": [],
        "cwe": [
            {
                "id": "CWE-918",
                "value": "CWE-918 Server-Side Request Forgery (SSRF)"
            }
        ]
    },
    "CVE-2025-30370": {
        "published_date": "2025-04-03T22:00:44.476Z",
        "patch_commits": [],
        "sw_version": "v0.51.0",
        "sw_version_wget": "https://github.com/jupyterlab/jupyterlab-git/archive/refs/tags/v0.51.0.zip",
        "description": "jupyterlab-git is a JupyterLab extension for version control using Git. On many platforms, a third party can create a Git repository under a name that includes a shell command substitution string in the syntax $(<command>). These directory names are allowed in macOS and a majority of Linux distributions. If a user starts jupyter-lab in a parent directory of this inappropriately-named Git repository, opens it, and clicks \"Git > Open Git Repository in Terminal\" from the menu bar, then the injected command <command> is run in the user's shell without the user's permission. This issue is occurring because when that menu entry is clicked, jupyterlab-git opens the terminal and runs cd <git-repo-path> through the shell to set the current directory. Doing so runs any command substitution strings present in the directory name, which leads to the command injection issue described here. A previous patch provided an incomplete fix. This vulnerability is fixed in 0.51.1.",
        "sec_adv": [],
        "cwe": [
            {
                "id": "CWE-78",
                "value": "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
            }
        ]
    },
    "CVE-2025-31481": {
        "cwe": [
            {
                "id": "CWE-863",
                "value": "CWE-863: Incorrect Authorization"
            }
        ],
        "description": "API Platform Core is a system to create hypermedia-driven REST and GraphQL APIs. Using the Relay special node type you can bypass the configured security on an operation. This vulnerability is fixed in 4.0.22 and 3.4.17.",
        "languages": [
            "PHP"
        ],
        "patch_commits": [],
        "published_date": "2025-04-03T19:20:22.916Z",
        "sec_adv": [],
        "sw_version": "v4.0.0",
        "sw_version_wget": "https://github.com/api-platform/core/archive/refs/tags/v4.0.0.zip"
    },
    "CVE-2025-27092": {
        "published_date": "2025-02-19T22:16:56.207Z",
        "patch_commits": [],
        "sw_version": "v8.0.0",
        "sw_version_wget": "https://github.com/cmu-sei/GHOSTS/archive/refs/tags/v8.0.0.zip",
        "description": "GHOSTS is an open source user simulation framework for cyber experimentation, simulation, training, and exercise. A path traversal vulnerability was discovered in GHOSTS version 8.0.0.0 that allows an attacker to access files outside of the intended directory through the photo retrieval endpoint. The vulnerability exists in the /api/npcs/{id}/photo endpoint, which is designed to serve profile photos for NPCs (Non-Player Characters) but fails to properly validate and sanitize file paths. When an NPC is created with a specially crafted photoLink value containing path traversal sequences (../, ..\\, etc.), the application processes these sequences without proper sanitization. This allows an attacker to traverse directory structures and access files outside of the intended photo directory, potentially exposing sensitive system files. The vulnerability is particularly severe because it allows reading arbitrary files from the server's filesystem with the permissions of the web application process, which could include configuration files, credentials, or other sensitive data. This issue has been addressed in version 8.2.7.90 and all users are advised to upgrade. There are no known workarounds for this vulnerability.",
        "sec_adv": [],
        "cwe": [
            {
                "id": "CWE-22",
                "value": "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            }
        ]
    },
    "CVE-2025-1944": {
        "published_date": "2025-03-10T11:30:32.896Z",
        "patch_commits": [],
        "sw_version": "v0.0.22",
        "sw_version_wget": "https://github.com/mmaitre314/picklescan/archive/refs/tags/v0.0.22.zip",
        "description": "picklescan before 0.0.23 is vulnerable to a ZIP archive manipulation attack that causes it to crash when attempting to extract and scan PyTorch model archives. By modifying the filename in the ZIP header while keeping the original filename in the directory listing, an attacker can make PickleScan raise a BadZipFile error. However, PyTorch's more forgiving ZIP implementation still allows the model to be loaded, enabling malicious payloads to bypass detection.",
        "sec_adv": [],
        "cwe": [
            {
                "id": "CWE-345",
                "value": "CWE-345 Insufficient Verification of Data Authenticity"
            }
        ]
    },
    "CVE-2025-25288": {
        "published_date": "2025-02-14T19:33:43.428Z",
        "patch_commits": [],
        "sw_version": "v1.0.0",
        "sw_version_wget": "https://github.com/octokit/plugin-paginate-rest.js/archive/refs/tags/v1.0.0.zip",
        "description": "@octokit/plugin-paginate-rest is the Octokit plugin to paginate REST API endpoint responses. For versions starting in 1.0.0 and prior to 11.4.1 of the npm package `@octokit/plugin-paginate-rest`, when calling `octokit.paginate.iterator()`, a specially crafted `octokit` instance\u2014particularly with a malicious `link` parameter in the `headers` section of the `request`\u2014can trigger a ReDoS attack. Version 11.4.1 contains a fix for the issue.",
        "sec_adv": [],
        "cwe": [
            {
                "id": "CWE-1333",
                "value": "CWE-1333: Inefficient Regular Expression Complexity"
            }
        ]
    },
    "CVE-2025-24963": {
        "published_date": "2025-02-04T19:36:52.385Z",
        "patch_commits": [],
        "sw_version": "v2.0.4",
        "sw_version_wget": "https://github.com/vitest-dev/vitest/archive/refs/tags/v2.0.4.zip",
        "description": "Vitest is a testing framework powered by Vite. The `__screenshot-error` handler on the browser mode HTTP server that responds any file on the file system. Especially if the server is exposed on the network by `browser.api.host: true`, an attacker can send a request to that handler from remote to get the content of arbitrary files.This `__screenshot-error` handler on the browser mode HTTP server responds any file on the file system. This code was added by commit `2d62051`. Users explicitly exposing the browser mode server to the network by `browser.api.host: true` may get any files exposed. This issue has been addressed in versions 2.1.9 and 3.0.4. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
        "sec_adv": [],
        "cwe": [
            {
                "id": "CWE-22",
                "value": "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            }
        ]
    },
    "CVE-2025-32014": {
        "published_date": "2025-04-07T14:56:40.413Z",
        "patch_commits": [],
        "sw_version": "v3.3.2",
        "sw_version_wget": "https://github.com/remcohaszing/estree-util-value-to-estree/archive/refs/tags/v3.3.2.zip",
        "description": "estree-util-value-to-estree converts a JavaScript value to an ESTree expression. When generating an ESTree from a value with a property named __proto__, valueToEstree would generate an object that specifies a prototype instead. This vulnerability is fixed in 3.3.3.",
        "sec_adv": [],
        "cwe": [
            {
                "id": "CWE-1321",
                "value": "CWE-1321: Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')"
            }
        ]
    },
    "CVE-2025-46721": {
        "published_date": "2025-05-13T15:29:30.068Z",
        "patch_commits": [],
        "sw_version": "v1.1.1",
        "sw_version_wget": "https://github.com/justinas/nosurf/archive/refs/tags/v1.1.1.zip",
        "description": "nosurf is cross-site request forgery (CSRF) protection middleware for Go. A vulnerability in versions prior to 1.2.0 allows an attacker who controls content on the target site, or on a subdomain of the target site (either via XSS, or otherwise) to bypass CSRF checks and issue requests on user's behalf. Due to misuse of the Go `net/http` library, nosurf categorizes all incoming requests as plain-text HTTP requests, in which case the `Referer` header is not checked to have the same origin as the target webpage. If the attacker has control over HTML contents on either the target website (e.g. `example.com`), or on a website hosted on a subdomain of the target (e.g. `attacker.example.com`), they will also be able to manipulate cookies set for the target website. By acquiring the secret CSRF token from the cookie, or overriding the cookie with a new token known to the attacker, `attacker.example.com` is able to craft cross-site requests to `example.com`. A patch for the issue was released in nosurf 1.2.0. In lieu of upgrading to a patched version of nosurf, users may additionally use another HTTP middleware to ensure that a non-safe HTTP request is coming from the same origin (e.g. by requiring a `Sec-Fetch-Site: same-origin` header in the request).",
        "sec_adv": [],
        "cwe": [
            {
                "id": "CWE-352",
                "value": "CWE-352: Cross-Site Request Forgery (CSRF)"
            }
        ]
    },
    "CVE-2025-25304": {
        "published_date": "2025-02-14T19:28:00.388Z",
        "patch_commits": [],
        "sw_version": "v5.25.0",
        "sw_version_wget": "https://github.com/vega/vega/archive/refs/tags/v5.25.0.zip",
        "description": "Vega is a visualization grammar, a declarative format for creating, saving, and sharing interactive visualization designs. Prior to version 5.26.0 of vega and 5.4.2 of vega-selections, the `vlSelectionTuples` function can be used to call JavaScript functions, leading to cross-site scripting.`vlSelectionTuples` calls multiple functions that can be controlled by an attacker, including one call with an attacker-controlled argument. This can be used to call `Function()` with arbitrary JavaScript and the resulting function can be called with `vlSelectionTuples` or using a type coercion to call `toString` or `valueOf`. Version 5.26.0 of vega and 5.4.2 of vega-selections fix this issue.",
        "sec_adv": [],
        "cwe": [
            {
                "id": "CWE-79",
                "value": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
            }
        ]
    }
}